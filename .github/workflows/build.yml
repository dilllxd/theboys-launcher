name: Build TheBoysLauncher

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  VERSION_FILE: version.env
 
permissions:
  contents: write

jobs:
  build:
    name: Build Applications
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            binary_name: TheBoysLauncher
            artifact_name: TheBoysLauncher-Linux
          - os: windows-latest
            platform: windows
            binary_name: TheBoysLauncher.exe
            artifact_name: TheBoysLauncher-Windows
          - os: macos-latest
            platform: darwin
            binary_name: TheBoysLauncher
            artifact_name: TheBoysLauncher-macOS
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '^1.23'
        cache: true
        cache-dependency-path: go.sum

    - name: Get version
      id: version
      shell: bash
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          source ./scripts/get-version.sh
          VERSION="$FULL_VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"



    - name: Install system dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev libglfw3-dev libx11-dev libxcursor-dev libxinerama-dev libxi-dev libxrandr-dev libxext-dev libxfixes-dev libxxf86vm-dev pkg-config



    - name: Install Go dependencies
      run: go mod download

    - name: Build binary
      run: |
        # Build for native platform only to avoid OpenGL cross-compilation issues
        go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o ${{ matrix.binary_name }} .

    - name: Make binary executable (Unix)
      if: matrix.platform != 'windows'
      run: chmod +x ${{ matrix.binary_name }}

    - name: Create macOS native executable
      if: matrix.platform == 'darwin'
      run: |
        echo "Creating macOS native executable..."

        # Build natively (GitHub Actions macOS runners are typically Intel)
        echo "Building macOS binary..."
        go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o TheBoysLauncher-macos .

        # Make executable
        chmod +x TheBoysLauncher-macos

        # Show file info
        echo "macOS binary created:"
        file TheBoysLauncher-macos
        ls -la TheBoysLauncher-macos

    - name: Ensure WiX is installed (Windows)
      if: matrix.platform == 'windows'
      run: |
        # If cached WiX bin exists, use it; otherwise install via Chocolatey (try common packages) and cache
        if (Test-Path build-tools-cache\wix\bin) {
          Write-Host "Using cached WiX binaries"
          $cacheBin = Join-Path $PWD "build-tools-cache\wix\bin"
          echo $cacheBin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        } else {
          # Install Chocolatey if not present
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          }

          # Try a few possible Chocolatey package names for WiX
          Write-Host "Installing WiX (trying wixtoolset, then wix)"
          choco install wixtoolset -y --no-progress || choco install wix -y --no-progress || Write-Host "choco install attempted"

          # Try to locate installed candle.exe (primary WiX binary)
          $candleCmd = Get-Command candle.exe -ErrorAction SilentlyContinue
          if ($candleCmd) {
            $wixBin = Split-Path $candleCmd.Source -Parent
          } else {
            # Fallback to common install locations
            $possible = @(
              "C:\\Program Files (x86)\\WiX Toolset v3.11\\bin",
              "C:\\Program Files (x86)\\WiX Toolset v3.14\\bin",
              "C:\\ProgramData\\chocolatey\\lib\\wixtoolset\\tools",
              "C:\\ProgramData\\chocolatey\\lib\\wix\\tools"
            )
            $wixBin = $possible | Where-Object { Test-Path $_ } | Select-Object -First 1
          }

          if (-not $wixBin) {
            Write-Error "WiX binaries not found after installation. Please check available Chocolatey packages or provide a cached build-tools-cache/wix/bin."
            exit 1
          }

          # Copy WiX bin to build-tools-cache so we can cache it for future runs
          New-Item -ItemType Directory -Force -Path build-tools-cache\wix\bin
          Copy-Item -Path (Join-Path $wixBin '*') -Destination build-tools-cache\wix\bin -Recurse -Force
          $cacheBin = Join-Path $PWD "build-tools-cache\wix\bin"
          echo $cacheBin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        }

    - name: Cache Windows build tools
      if: matrix.platform == 'windows'
      uses: actions/cache@v4
      with:
        path: |
          build-tools-cache
        key: windows-build-tools-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          windows-build-tools-

    - name: Debug WiX and icon (Windows)
      if: matrix.platform == 'windows'
      run: |
        Write-Host "--- WiX / icon debug output ---"
        Write-Host "Check for candle.exe and light.exe in PATH"
        Get-Command candle.exe -ErrorAction SilentlyContinue | Format-List -Force || Write-Host "candle.exe not found in PATH"
        Get-Command light.exe -ErrorAction SilentlyContinue | Format-List -Force || Write-Host "light.exe not found in PATH"

        Write-Host "List cached build-tools-cache\wix\bin (if present)"
        if (Test-Path build-tools-cache\wix\bin) { Get-ChildItem build-tools-cache\wix\bin -Recurse | Select-Object FullName, Length | Format-Table } else { Write-Host "No cached wix bin" }

        Write-Host "Check that icon.ico exists in repository root"
        if (Test-Path icon.ico) { Write-Host "icon.ico found:"; Get-Item icon.ico | Format-List Name,Length } else { Write-Host "icon.ico missing" }

        Write-Host "Where (on disk) candle.exe would be located (where.exe)"
        where.exe candle.exe || Write-Host "where.exe returned no result"

        Write-Host "--- end debug ---"

    - name: Build Windows installer
      if: matrix.platform == 'windows'
      run: powershell -NoProfile -ExecutionPolicy Bypass -File .\scripts\build-installer.ps1 -Version "${{ steps.version.outputs.version }}"

    # NOTE: WiX installation is handled earlier and the path is appended to GITHUB_PATH. Duplicate installation step removed.

    - name: Upload primary binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.binary_name }}
        retention-days: 30

    - name: Upload macOS native executable
      if: matrix.platform == 'darwin'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-Native
        path: TheBoysLauncher-macos
        retention-days: 30

    - name: Upload Windows installer
      if: matrix.platform == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-Installer
        path: TheBoysLauncher-Setup-*.msi
        retention-days: 30

    - name: Show build summary
      shell: bash
      run: |
        echo "âœ… Build completed successfully!"
        echo "Platform: ${{ matrix.platform }}"
        echo "Version: ${{ steps.version.outputs.version }}"
        if [ "${{ matrix.platform }}" = "darwin" ]; then
          echo "Artifacts: Native binary + macOS-specific binary"
        elif [ "${{ matrix.platform }}" = "windows" ]; then
          echo "Artifacts: Binary + MSI installer"
        else
          echo "Artifacts: Binary only"
        fi
        ls -la ${{ matrix.binary_name }}* 2>/dev/null || true

  publish_release:
    name: Publish Release (tags only)
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog (git log)
        id: changelog
        shell: bash
        run: |
          TAG=${GITHUB_REF_NAME}
          echo "Generating changelog for ${TAG}"
          git fetch --tags
          PREV_TAG=$(git tag --sort=-creatordate | grep -v "^${TAG}$" | head -n1 || true)
          if [ -z "$PREV_TAG" ]; then
            # no previous tag found: show last 50 commits
            BODY=$(git log --pretty=format:'%h %s (%an)' -n 50)
          else
            BODY=$(git log --pretty=format:'%h %s (%an)' ${PREV_TAG}..${TAG})
          fi
          # write to GITHUB_OUTPUT safely
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Determine prerelease flag
        id: detect
        shell: bash
        run: |
          TAG_NAME="${GITHUB_REF_NAME}"
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
          # Consider tags containing '-dev.' (e.g., v1.2.3-dev.<sha>) as prerelease
          if echo "${TAG_NAME}" | grep -E -qi "-dev[.]"; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.detect.outputs.tag }}
          release_name: ${{ steps.detect.outputs.tag }}
          body: ${{ steps.changelog.outputs.body }}
          draft: false
          prerelease: ${{ steps.detect.outputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release artifacts
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}
          echo "Upload URL: $UPLOAD_URL"
          shopt -s globstar || true
          for f in release-artifacts/**; do
            if [ -f "$f" ]; then
              echo "Uploading $f"
              curl -s -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$f" "${UPLOAD_URL}?name=$(basename "$f")"
            fi
          done