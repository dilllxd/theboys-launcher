name: macOS Build and Test

# Trigger on pushes and pull requests to macos-support branch
on:
  push:
    branches: [ macos-support ]
  pull_request:
    branches: [ macos-support ]
  workflow_dispatch:

jobs:
  # macOS builds - focus on working executables first
  build-macos:
    name: macOS ${{ matrix.arch }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: Intel
            goarch: amd64
            output: TheBoysLauncher-amd64
            bundle_arch: amd64
          - arch: Apple Silicon
            goarch: arm64
            output: TheBoysLauncher-arm64
            bundle_arch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: macos-go-${{ matrix.goarch }}-${{ hashFiles('**/go.sum', '**/go.mod') }}-${{ github.sha }}
        restore-keys: |
          macos-go-${{ matrix.goarch }}-${{ hashFiles('**/go.sum', '**/go.mod') }}-
          macos-go-${{ matrix.goarch }}-

    - name: Download dependencies
      run: go mod download

    - name: Build macOS ${{ matrix.arch }}
      timeout-minutes: 5
      run: |
        echo "Building macOS ${{ matrix.arch }}..."
        export GOARCH=${{ matrix.goarch }} CGO_ENABLED=1
        go build -ldflags="-s -w -X main.version=v3.1.0" -o ${{ matrix.output }} .

        # Verify the binary was created and show info
        if [[ -f "${{ matrix.output }}" ]]; then
          echo "✓ macOS ${{ matrix.arch }} build successful!"
          ls -la ${{ matrix.output }}
          file ${{ matrix.output }}
        else
          echo "❌ macOS ${{ matrix.arch }} build failed - no executable created"
          exit 1
        fi

    - name: Upload macOS ${{ matrix.arch }} binary
      uses: actions/upload-artifact@v4
      with:
        name: TheBoysLauncher-macOS-${{ matrix.bundle_arch }}-Binary
        path: ${{ matrix.output }}
        retention-days: 7

  # Create app bundles from working executables
  create-bundles:
    name: Create App Bundles
    runs-on: macos-latest
    needs: build-macos
    if: always() && needs.build-macos.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Intel executable
      uses: actions/download-artifact@v4
      with:
        name: TheBoysLauncher-macOS-amd64-Binary
        path: ./

    - name: Download Apple Silicon executable
      uses: actions/download-artifact@v4
      with:
        name: TheBoysLauncher-macOS-arm64-Binary
        path: ./

    - name: Verify executables
      run: |
        echo "Checking downloaded executables:"
        ls -la TheBoysLauncher-*
        echo ""
        echo "Intel executable info:"
        file TheBoysLauncher-amd64
        echo ""
        echo "ARM executable info:"
        file TheBoysLauncher-arm64

    - name: Prepare directories for app bundles
      run: |
        echo "Setting up directory structure for app bundles..."
        mkdir -p build/amd64
        mkdir -p build/arm64
        mkdir -p build/universal

        # Copy executables to expected locations with correct names
        echo "Copying Intel executable..."
        cp TheBoysLauncher-amd64 build/amd64/TheBoysLauncher
        chmod +x build/amd64/TheBoysLauncher

        echo "Copying Apple Silicon executable..."
        cp TheBoysLauncher-arm64 build/arm64/TheBoysLauncher
        chmod +x build/arm64/TheBoysLauncher

        echo "Verifying copied executables:"
        file build/amd64/TheBoysLauncher
        file build/arm64/TheBoysLauncher

    - name: Create Intel app bundle
      run: |
        echo "Creating Intel app bundle..."
        chmod +x scripts/create-app-bundle.sh
        ./scripts/create-app-bundle.sh amd64 v3.1.0

        if [ -d "build/amd64/TheBoysLauncher.app" ]; then
          echo "✅ Intel app bundle created!"
          ls -la build/amd64/TheBoysLauncher.app/Contents/MacOS/
          file build/amd64/TheBoysLauncher.app/Contents/MacOS/TheBoysLauncher
        else
          echo "❌ Intel app bundle creation failed"
          exit 1
        fi

    - name: Create Apple Silicon app bundle
      run: |
        echo "Creating Apple Silicon app bundle..."
        ./scripts/create-app-bundle.sh arm64 v3.1.0

        if [ -d "build/arm64/TheBoysLauncher.app" ]; then
          echo "✅ Apple Silicon app bundle created!"
          ls -la build/arm64/TheBoysLauncher.app/Contents/MacOS/
          file build/arm64/TheBoysLauncher.app/Contents/MacOS/TheBoysLauncher
        else
          echo "❌ Apple Silicon app bundle creation failed"
          exit 1
        fi

    - name: Create Universal binary
      run: |
        echo "Creating Universal binary..."
        mkdir -p build/universal

        # Create universal binary from raw executables
        if [ -f "TheBoysLauncher-amd64" ] && [ -f "TheBoysLauncher-arm64" ]; then
          lipo -create TheBoysLauncher-amd64 TheBoysLauncher-arm64 -output build/universal/TheBoysLauncher

          echo "✅ Universal binary created!"
          file build/universal/TheBoysLauncher
          lipo -info build/universal/TheBoysLauncher
        else
          echo "❌ Could not create universal binary - missing executables"
          ls -la TheBoysLauncher-*
          exit 1
        fi

    - name: Create Universal app bundle
      run: |
        echo "Creating Universal app bundle..."
        ./scripts/create-app-bundle.sh universal v3.1.0

        if [ -d "build/universal/TheBoysLauncher.app" ]; then
          echo "✅ Universal app bundle created!"
          ls -la build/universal/TheBoysLauncher.app/Contents/MacOS/
          file build/universal/TheBoysLauncher.app/Contents/MacOS/TheBoysLauncher
          du -sh build/universal/TheBoysLauncher.app
        else
          echo "❌ Universal app bundle creation failed"
          exit 1
        fi

    - name: Create ZIP files for distribution
      run: |
        echo "Creating ZIP files for distribution..."

        # Intel ZIP
        cd build/amd64/
        zip -r ../../TheBoysLauncher-Intel.zip TheBoysLauncher.app/
        cd ../..

        # Apple Silicon ZIP
        cd build/arm64/
        zip -r ../../TheBoysLauncher-AppleSilicon.zip TheBoysLauncher.app/
        cd ../..

        # Universal ZIP
        cd build/universal/
        zip -r ../../TheBoysLauncher-Universal.zip TheBoysLauncher.app/
        cd ../..

        echo "✅ ZIP files created:"
        ls -la TheBoysLauncher-*.zip

    - name: Upload Intel artifact
      uses: actions/upload-artifact@v4
      with:
        name: TheBoysLauncher-macOS-Intel
        path: TheBoysLauncher-Intel.zip
        retention-days: 7

    - name: Upload Apple Silicon artifact
      uses: actions/upload-artifact@v4
      with:
        name: TheBoysLauncher-macOS-AppleSilicon
        path: TheBoysLauncher-AppleSilicon.zip
        retention-days: 7

    - name: Upload Universal artifact
      uses: actions/upload-artifact@v4
      with:
        name: TheBoysLauncher-macOS-Universal
        path: TheBoysLauncher-Universal.zip
        retention-days: 7

  # Windows builds
  build-windows:
    name: Windows Build
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~\AppData\Local\go-build
          ~\go\pkg\mod
        key: windows-go-amd64-${{ hashFiles('**/go.sum', '**/go.mod') }}-${{ github.sha }}
        restore-keys: |
          windows-go-amd64-${{ hashFiles('**/go.sum', '**/go.mod') }}-
          windows-go-amd64-

    - name: Download dependencies
      run: go mod download

    - name: Build Windows executable
      timeout-minutes: 15
      run: |
        echo "Building Windows executable..."
        echo "Go version:"
        go version
        echo "Starting build..."
        $buildStartTime = Get-Date

        go build -v -ldflags="-s -w -X main.version=v3.1.0" -o TheBoysLauncher.exe .

        $buildEndTime = Get-Date
        $buildDuration = $buildEndTime - $buildStartTime
        echo "Build completed in $($buildDuration.TotalSeconds) seconds"

        # Verify the binary was created
        if (Test-Path "TheBoysLauncher.exe") {
          echo "✅ Windows build successful!"
          Get-ChildItem TheBoysLauncher.exe
          echo "Binary size: $((Get-Item TheBoysLauncher.exe).Length / 1MB) MB"
        } else {
          echo "❌ Windows build failed - no executable created"
          exit 1
        }

    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: TheBoysLauncher-Windows
        path: TheBoysLauncher.exe
        retention-days: 7

  # Quick validation
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    needs: [build-macos, create-bundles, build-windows]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Cache Go modules for validation
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: validation-go-linux-${{ hashFiles('**/go.sum', '**/go.mod') }}-${{ github.sha }}
        restore-keys: |
          validation-go-linux-${{ hashFiles('**/go.sum', '**/go.mod') }}-
          validation-go-linux-

    - name: Install dependencies for validation
      run: |
        echo "Installing minimal dependencies for syntax checking..."
        sudo apt-get update
        sudo apt-get install -y pkg-config libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libgl1-mesa-dev

    - name: Basic syntax check
      run: |
        echo "Checking Go syntax..."
        go vet ./... || echo "⚠️ Some vet issues found (expected during development)"
        echo "✅ Syntax check completed!"

    - name: Module verification
      run: |
        echo "Verifying Go modules..."
        go mod verify
        echo "✅ Module verification completed!"

    - name: Cross-platform compilation check
      run: |
        echo "Testing cross-platform compilation..."

        # Test Windows compilation
        echo "Testing Windows target..."
        GOOS=windows GOARCH=amd64 go build -o test-windows.exe .
        rm -f test-windows.exe

        # Test macOS compilation
        echo "Testing macOS Intel target..."
        GOOS=darwin GOARCH=amd64 go build -o test-macos-amd64 .
        rm -f test-macos-amd64

        echo "Testing macOS ARM target..."
        GOOS=darwin GOARCH=arm64 go build -o test-macos-arm64 .
        rm -f test-macos-arm64

        # Test Linux compilation
        echo "Testing Linux target..."
        GOOS=linux GOARCH=amd64 go build -o test-linux .
        rm -f test-linux

        echo "✅ Cross-platform compilation successful!"

    - name: Generate build summary
      run: |
        echo "## 🚀 Cross-Platform Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Windows Build | ${{ needs.build-windows.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| macOS Executables | ${{ needs.build-macos.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| macOS App Bundles | ${{ needs.create-bundles.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.build-windows.result }}" == "success" && "${{ needs.build-macos.result }}" == "success" && "${{ needs.create-bundles.result }}" == "success" ]]; then
          echo "🎉 **All builds completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Available Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- TheBoysLauncher-Windows (exe)" >> $GITHUB_STEP_SUMMARY
          echo "- TheBoysLauncher-macOS-Intel (ZIP)" >> $GITHUB_STEP_SUMMARY
          echo "- TheBoysLauncher-macOS-AppleSilicon (ZIP)" >> $GITHUB_STEP_SUMMARY
          echo "- TheBoysLauncher-macOS-Universal (ZIP)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some builds failed** - Check the individual job logs for details." >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "*Commit: ${{ github.sha }}*" >> $GITHUB_STEP_SUMMARY