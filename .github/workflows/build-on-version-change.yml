name: Build and Pre-release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build Applications
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            binary_name: TheBoysLauncher
            artifact_name: TheBoysLauncher-Linux
          - os: windows-latest
            platform: windows
            binary_name: TheBoysLauncher.exe
            artifact_name: TheBoysLauncher-Windows
          - os: macos-latest
            platform: darwin
            binary_name: TheBoysLauncher
            artifact_name: TheBoysLauncher-macOS
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository (bumped commit or tag)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.23'
          cache: true
          cache-dependency-path: go.sum

      - name: Read version from tag or version.env
        id: version
        shell: bash
        run: |
          # If this run was triggered by a tag, use the tag as the version
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Building version (from tag): $VERSION"
          else
            # Fallback: read from version.env if present
            source ./version.env || true
            if [[ -n "${PRERELEASE:-}" ]]; then
              VERSION="${VERSION}-${PRERELEASE}"
            else
              VERSION="${VERSION}"
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Building version (from version.env): $VERSION"
          fi

      - name: Install Go dependencies
        run: go mod download

      - name: Install system dependencies (Ubuntu)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            pkg-config \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libx11-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev \
            libxxf86vm-dev \
            libasound2-dev

      - name: Build binary
        run: |
          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o ${{ matrix.binary_name }} .

      - name: Make binary executable (Unix)
        if: matrix.platform != 'windows'
        run: chmod +x ${{ matrix.binary_name }}

      - name: Create macOS native executable
        if: matrix.platform == 'darwin'
        run: |
          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o TheBoysLauncher-macos .
          chmod +x TheBoysLauncher-macos

      - name: Ensure WiX is installed (Windows)
        if: matrix.platform == 'windows'
        run: |
          if (Test-Path build-tools-cache\wix\bin) {
            Write-Host "Using cached WiX binaries"
            $cacheBin = Join-Path $PWD "build-tools-cache\wix\bin"
            echo $cacheBin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } else {
            if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
              Set-ExecutionPolicy Bypass -Scope Process -Force
              [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
              iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
            }
            choco install wixtoolset -y --no-progress || choco install wix -y --no-progress || Write-Host "choco install attempted"
            $candleCmd = Get-Command candle.exe -ErrorAction SilentlyContinue
            if ($candleCmd) {
              $wixBin = Split-Path $candleCmd.Source -Parent
            } else {
              $possible = @(
                "C:\\Program Files (x86)\\WiX Toolset v3.11\\bin",
                "C:\\Program Files (x86)\\WiX Toolset v3.14\\bin",
                "C:\\ProgramData\\chocolatey\\lib\\wixtoolset\\tools",
                "C:\\ProgramData\\chocolatey\\lib\\wix\\tools"
              )
              $wixBin = $possible | Where-Object { Test-Path $_ } | Select-Object -First 1
            }
            if (-not $wixBin) { Write-Error "WiX binaries not found after installation."; exit 1 }
            New-Item -ItemType Directory -Force -Path build-tools-cache\wix\bin
            Copy-Item -Path (Join-Path $wixBin '*') -Destination build-tools-cache\wix\bin -Recurse -Force
            $cacheBin = Join-Path $PWD "build-tools-cache\wix\bin"
            echo $cacheBin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }

      - name: Build Windows installer
        if: matrix.platform == 'windows'
        run: powershell -NoProfile -ExecutionPolicy Bypass -File .\scripts\build-installer.ps1 -Version "${{ steps.version.outputs.version }}"

      - name: Upload primary binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.binary_name }}
          retention-days: 30

      - name: Upload macOS native executable
        if: matrix.platform == 'darwin'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-Native
          path: TheBoysLauncher-macos
          retention-days: 30

      - name: Upload Windows installer
        if: matrix.platform == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-Installer
          path: TheBoysLauncher-Setup-*.msi
          retention-days: 30

      - name: Show build summary
        shell: bash
        run: |
          echo "âœ… Build completed successfully!"
          echo "Platform: ${{ matrix.platform }}"
          echo "Version: ${{ steps.version.outputs.version }}"
          ls -la ${{ matrix.binary_name }}* 2>/dev/null || true

  publish_release:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Checkout repository (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine tag and prerelease
        id: detect
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"
          if [ -z "$TAG" ]; then
            echo "GITHUB_REF_NAME empty, falling back to version.env"
            source ./version.env || true
            if [[ -n "${PRERELEASE:-}" ]]; then
              TAG="v${VERSION}-${PRERELEASE}"
            else
              TAG="v${VERSION}"
            fi
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          if echo "${TAG}" | grep -E -qi "-dev[.]"; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog (git log)
        id: changelog
        shell: bash
        run: |
          TAG=${GITHUB_REF_NAME:-${{ steps.detect.outputs.tag }}}
          git fetch --tags
          PREV_TAG=$(git tag --sort=-creatordate | grep -v "^${TAG}$" | head -n1 || true)
          if [ -z "$PREV_TAG" ]; then
            BODY=$(git log --pretty=format:'%h %s (%an)' -n 50)
          else
            BODY=$(git log --pretty=format:'%h %s (%an)' ${PREV_TAG}..${TAG})
          fi
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.detect.outputs.tag }}
          release_name: ${{ steps.detect.outputs.tag }}
          body: ${{ steps.changelog.outputs.body }}
          draft: false
          prerelease: ${{ steps.detect.outputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release artifacts
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}
          shopt -s globstar || true
          for f in release-artifacts/**; do
            if [ -f "$f" ]; then
              echo "Uploading $f"
              curl -s -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$f" "${UPLOAD_URL}?name=$(basename "$f")"
            fi
          done
