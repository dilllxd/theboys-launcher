name: Reset Dev Branch After Release

# Trigger when a new release is published on the main branch (not prerelease)
on:
  release:
    types: [published]

# Set permissions for the workflow
permissions:
  contents: write

# Ensure only one instance runs at a time
concurrency:
  group: reset-dev-branch
  cancel-in-progress: false

jobs:
  reset-dev:
    runs-on: ubuntu-latest
    if: '!github.event.release.prerelease && github.actor != ''github-actions[bot]'''
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch full history for proper reset
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Verify release is on main branch
        run: |
          echo "Release tag: ${{ github.event.release.tag_name }}"
          echo "Target commitish: ${{ github.event.release.target_commitish }}"
          
          if [ "${{ github.event.release.target_commitish }}" != "main" ]; then
            echo "Release is not targeting main branch. Skipping dev reset."
            exit 0
          fi
          
          if [ "${{ github.event.release.prerelease }}" = "true" ]; then
            echo "This is a prerelease. Skipping dev reset."
            exit 0
          fi
      
      - name: Fetch latest changes
        run: |
          git fetch origin main
          git fetch origin dev
      
      - name: Verify branches exist
        run: |
          if ! git rev-parse --verify origin/main >/dev/null 2>&1; then
            echo "Error: main branch does not exist"
            exit 1
          fi
          
          if ! git rev-parse --verify origin/dev >/dev/null 2>&1; then
            echo "Error: dev branch does not exist"
            exit 1
          fi
      
      - name: Check for differences between branches
        id: check-diff
        run: |
          MAIN_COMMIT=$(git rev-parse origin/main)
          DEV_COMMIT=$(git rev-parse origin/dev)
          
          echo "Main branch commit: $MAIN_COMMIT"
          echo "Dev branch commit: $DEV_COMMIT"
          
          if [ "$MAIN_COMMIT" = "$DEV_COMMIT" ]; then
            echo "Branches are already identical. No reset needed."
            echo "reset_needed=false" >> $GITHUB_OUTPUT
          else
            echo "Branches differ. Reset is needed."
            echo "reset_needed=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Reset dev branch to match main
        if: steps.check-diff.outputs.reset_needed == 'true'
        run: |
          # Create a backup reference before reset
          git branch dev-backup origin/dev
          
          # Switch to dev branch
          git checkout dev
          
          # Reset dev to match main using force-with-lease
          git reset --hard origin/main
          
          # Create a commit explaining the reset
          git commit --allow-empty -m "chore: reset dev branch to match main after release ${{ github.event.release.tag_name }}

          This automated commit resets the dev branch to match the main branch
          after the release of ${{ github.event.release.tag_name }}.
          
          Previous dev branch state is preserved in the 'dev-backup' branch.
          
          Release: ${{ github.event.release.html_url }}"
          
          # Push with force-with-lease for safety
          git push --force-with-lease origin dev
          
          echo "Dev branch has been successfully reset to match main"
      
      - name: Verify reset was successful
        if: steps.check-diff.outputs.reset_needed == 'true'
        run: |
          # Fetch the latest state
          git fetch origin dev
          
          # Get the current commit hashes
          MAIN_COMMIT=$(git rev-parse origin/main)
          DEV_COMMIT=$(git rev-parse origin/dev)
          
          echo "Verification - Main branch commit: $MAIN_COMMIT"
          echo "Verification - Dev branch commit: $DEV_COMMIT"
          
          if [ "$MAIN_COMMIT" = "$DEV_COMMIT" ]; then
            echo "✅ Verification successful: dev branch now matches main branch"
          else
            echo "❌ Verification failed: dev branch does not match main branch"
            echo "Attempting to restore from backup..."
            
            # Restore from backup if verification fails
            git push --force origin dev-backup:dev
            exit 1
          fi
      
      - name: Create summary
        run: |
          if [ "${{ steps.check-diff.outputs.reset_needed }}" = "true" ]; then
            echo "## ✅ Dev Branch Reset Complete" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The dev branch has been successfully reset to match the main branch after release ${{ github.event.release.tag_name }}." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Details:" >> $GITHUB_STEP_SUMMARY
            echo "- **Release**: ${{ github.event.release.name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Tag**: ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Action**: Reset dev branch to match main" >> $GITHUB_STEP_SUMMARY
            echo "- **Backup**: Created dev-backup branch with previous state" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ℹ️ No Reset Needed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The dev branch was already identical to the main branch. No reset was performed." >> $GITHUB_STEP_SUMMARY
          fi