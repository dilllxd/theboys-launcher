name: Stable Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

concurrency:
  group: stable-release
  cancel-in-progress: false

jobs:
  bump_version:
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump.outputs.version }}
      full_version: ${{ steps.bump.outputs.full_version }}
      prerelease: ${{ steps.bump.outputs.prerelease }}
      tag: ${{ steps.bump.outputs.tag }}
      commit: ${{ steps.bump.outputs.commit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version and tag
        id: bump
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          git fetch --tags --force

          if [[ ! -f version.env ]]; then
            echo "version.env not found" >&2
            exit 1
          fi

          source ./version.env

          SHORT_SHA=$(git rev-parse --short "${GITHUB_SHA}")

          PATCH=$((PATCH + 1))
          VERSION="$MAJOR.$MINOR.$PATCH"
          PRERELEASE=""
          FULL_VERSION="${VERSION}"

          {
            echo "# TheBoysLauncher Version Configuration (auto-generated)"
            echo "VERSION=$VERSION"
            echo "MAJOR=$MAJOR"
            echo "MINOR=$MINOR"
            echo "PATCH=$PATCH"
            echo "BUILD_METADATA="
            echo "PRERELEASE=$PRERELEASE"
            echo
            echo "# Full version string is constructed by scripts/get-version.sh"
          } > version.env

          git add version.env
          if git diff --cached --quiet; then
            echo "No changes detected in version.env; aborting."
            exit 0
          fi

          git commit -m "ci: bump stable version to ${FULL_VERSION}"
          git push origin HEAD

          TAG="v${FULL_VERSION}"
          git tag -a "$TAG" -m "Stable release ${FULL_VERSION}"
          git push origin "$TAG"

          BUMP_SHA=$(git rev-parse HEAD)

          {
            echo "version=${VERSION}"
            echo "full_version=${FULL_VERSION}"
            echo "prerelease=${PRERELEASE}"
            echo "tag=${TAG}"
            echo "commit=${BUMP_SHA}"
          } >> "$GITHUB_OUTPUT"

  build:
    needs: bump_version
    if: ${{ needs.bump_version.result == 'success' }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            binary_name: TheBoysLauncher-linux
            artifact_name: TheBoysLauncher-Linux
          - os: windows-latest
            platform: windows
            binary_name: TheBoysLauncher.exe
            artifact_name: TheBoysLauncher-Windows
          - os: macos-latest
            platform: darwin
            binary_name: TheBoysLauncher-mac-universal
            artifact_name: TheBoysLauncher-macOS
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout bumped commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ needs.bump_version.outputs.commit }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.23'
          cache: true
          cache-dependency-path: go.sum

      - name: Install Go dependencies
        run: go mod download

      - name: Install system dependencies (Linux)
        if: ${{ matrix.platform == 'linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            pkg-config \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libx11-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev \
            libxxf86vm-dev \
            libasound2-dev

      - name: Build binary
        run: |
          if [ "${{ matrix.platform }}" = "darwin" ]; then
            # Build separate architectures for universal binary
            mkdir -p build/amd64 build/arm64
            export GOOS=darwin GOARCH=amd64 CGO_ENABLED=1
            go build -ldflags="-s -w -X main.version=${{ needs.bump_version.outputs.full_version }}" -o build/amd64/TheBoysLauncher .
            export GOOS=darwin GOARCH=arm64 CGO_ENABLED=1
            go build -ldflags="-s -w -X main.version=${{ needs.bump_version.outputs.full_version }}" -o build/arm64/TheBoysLauncher .
            # Create universal binary with lipo
            lipo -create build/amd64/TheBoysLauncher build/arm64/TheBoysLauncher -output ${{ matrix.binary_name }}
          else
            # Non-macOS builds (unchanged)
            go build -ldflags="-s -w -X main.version=${{ needs.bump_version.outputs.full_version }}" -o ${{ matrix.binary_name }} .
          fi

      - name: Make binary executable (Unix)
        if: ${{ matrix.platform != 'windows' }}
        run: chmod +x ${{ matrix.binary_name }}


      - name: Ensure WiX is installed
        if: ${{ matrix.platform == 'windows' }}
        shell: pwsh
        run: |
          if (Test-Path build-tools-cache\wix\bin) {
            Write-Host "Using cached WiX binaries"
            $cacheBin = Join-Path $PWD "build-tools-cache\wix\bin"
            $cacheBin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } else {
            if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
              Set-ExecutionPolicy Bypass -Scope Process -Force
              [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
              iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
            }
            choco install wixtoolset -y --no-progress || choco install wix -y --no-progress || Write-Host "choco install attempted"
            $candleCmd = Get-Command candle.exe -ErrorAction SilentlyContinue
            if ($candleCmd) {
              $wixBin = Split-Path $candleCmd.Source -Parent
            } else {
              $possible = @(
                "C:\\Program Files (x86)\\WiX Toolset v3.11\\bin",
                "C:\\Program Files (x86)\\WiX Toolset v3.14\\bin",
                "C:\\ProgramData\\chocolatey\\lib\\wixtoolset\\tools",
                "C:\\ProgramData\\chocolatey\\lib\\wix\\tools"
              )
              $wixBin = $possible | Where-Object { Test-Path $_ } | Select-Object -First 1
            }
            if (-not $wixBin) { Write-Error "WiX binaries not found after installation."; exit 1 }
            New-Item -ItemType Directory -Force -Path build-tools-cache\wix\bin | Out-Null
            Copy-Item -Path (Join-Path $wixBin '*') -Destination build-tools-cache\wix\bin -Recurse -Force
            $cacheBin = Join-Path $PWD "build-tools-cache\wix\bin"
            $cacheBin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }

      - name: Build Windows installer
        if: ${{ matrix.platform == 'windows' }}
        run: powershell -NoProfile -ExecutionPolicy Bypass -File .\scripts\build-installer.ps1 -Version "${{ needs.bump_version.outputs.full_version }}"

      - name: Rename Windows installer
        if: ${{ matrix.platform == 'windows' }}
        shell: pwsh
        run: |
          $fullVersion = "${{ needs.bump_version.outputs.full_version }}"
          $msi = Get-ChildItem -Filter "TheBoysLauncher-Setup-*.msi" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $msi) {
            Write-Error "MSI not found after build."
            exit 1
          }
          $target = "TheBoysLauncher-Setup-$fullVersion.msi"
          Move-Item $msi.FullName $target -Force

      - name: Upload primary binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.binary_name }}
          retention-days: 14


      - name: Upload Windows installer
        if: ${{ matrix.platform == 'windows' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-Installer
          path: TheBoysLauncher-Setup-${{ needs.bump_version.outputs.full_version }}.msi
          retention-days: 14

  publish:
    needs: [bump_version, build]
    if: ${{ needs.bump_version.result == 'success' && needs.build.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Generate release notes
        id: release-notes
        run: |
          git fetch --tags
          VERSION="${{ needs.bump_version.outputs.version }}"
          TAG="${{ needs.bump_version.outputs.tag }}"
          PREV_TAG=$(git tag --sort=-creatordate | grep -v "^${TAG}$" | head -n1 || true)
          if [ -z "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%an)" -n 50)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%an)" ${PREV_TAG}..${TAG})
          fi
          
          # Generate formatted release notes
          cat << EOF > release_notes.md
          ## TheBoysLauncher $VERSION

          ### 📦 Downloads:

          #### Windows:
          - **TheBoysLauncher.exe** - Standalone executable
          - **TheBoysLauncher-Setup-$VERSION.msi** - Professional MSI installer

          #### macOS:
          - **TheBoysLauncher-mac-universal** - Universal binary (Intel + Apple Silicon)

          #### Linux:
          - **TheBoysLauncher-linux** - Universal binary

          ### 🚀 Installation:

          **Windows:**
          1. Download MSI installer for professional installation with complete uninstall support
          2. Or download standalone executable if you prefer portable usage

          **macOS:**
          1. Download universal binary
          2. Make it executable: \`chmod +x TheBoysLauncher-mac-universal\`
          3. Run it: \`./TheBoysLauncher-mac-universal\`

          **Linux:**
          1. Download binary
          2. Make it executable: \`chmod +x TheBoysLauncher-linux\`
          3. Run it: \`./TheBoysLauncher-linux\`

          ### ⚠️ Important:
          - macOS users may need to allow the app to run in Security & Privacy settings
          - Windows SmartScreen may warn about unsigned software

          ### 📝 Changes:
          $CHANGELOG
          EOF
          
          {
            echo "body<<EOF"
            cat release_notes.md
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Create stable release
        id: release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.bump_version.outputs.tag }}
          release_name: TheBoysLauncher ${{ needs.bump_version.outputs.full_version }}
          body: ${{ steps.release-notes.outputs.body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          UPLOAD_URL=${{ steps.release.outputs.upload_url }}
          UPLOAD_URL="${UPLOAD_URL%\{*}"

          echo "Assets to upload:"
          find release-artifacts -type f -print

          while IFS= read -r file; do
            base=$(basename "$file")
            echo "Uploading $base"
            curl -sSL -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${UPLOAD_URL}?name=${base}"
          done < <(find release-artifacts -type f -print)